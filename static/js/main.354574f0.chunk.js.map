{"version":3,"sources":["store/reducers/user.js","storage.js","store/index.js","containers/login.js","AppRouteContainer.js","components/MovieCard.js","containers/home.js","utils.js","containers/moviedetail.js","containers/addMovie.js","serviceWorker.js","index.js","App.js"],"names":["INITIAL_STATE","isLoggedIn","fetchingUserSession","loginAction","id","dispatch","fetch","then","response","json","data","localStorage","setItem","type","Search","catch","err","console","log","loadMovieDetails","apiKey","getItem","undefined","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","combineReducers","user","state","action","movies","selectedMovie","Login","login","_submit","event","preventDefault","props","_onLoginIdChange","setState","target","name","value","onSubmit","this","Container","Input","onChange","e","SubmitButton","onClick","React","Component","connect","styled","div","innerWidth","innerHeight","input","AppRouteContainer","loggedInUser","prevProps","children","to","MovieCard","src","Poster","ColumnDiv","Title","Year","img","Home","useSelector","map","movie","key","imdbID","getUrlParam","parameter","defaultvalue","urlparameter","location","href","indexOf","vars","replace","m","getUrlVars","MovieDetail","useDispatch","movieId","useEffect","rest","Object","keys","Addmovie","Boolean","hostname","match","ReactDOM","render","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.354574f0.chunk.js","sourcesContent":["import { API_LOGIN_KEY } from \"../../storage\";\n\nexport const FETCH_LOGGED_IN_USER = \"FETCH_LOGGED_IN_USER\";\nexport const LOAD_DASHBOARD_MOVIES = \"LOAD_DASHBOARD_MOVIES\";\nexport const LOAD_MOVIE_DETAIL = \"LOAD_MOVIE_DETAIL\";\nconst INITIAL_STATE = {\n  isLoggedIn: false,\n  fetchingUserSession: true\n};\n\nexport const userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case FETCH_LOGGED_IN_USER:\n      return {\n        ...state,\n        isLoggedIn: !!action.data,\n        apiKey: action.data,\n        fetchingUserSession: false\n      };\n\n    case LOAD_DASHBOARD_MOVIES:\n      return { ...state, movies: action.data };\n\n    case LOAD_MOVIE_DETAIL:\n      return { ...state, selectedMovie: action.data };\n\n    default:\n      return state;\n  }\n};\n\nexport const loadLoggedInUserAction = () => dispatch => {\n  let loggedInUser = localStorage.getItem(API_LOGIN_KEY);\n  console.log({ loggedInUser });\n  dispatch(loginAction(loggedInUser));\n};\n\nexport const loginAction = id => dispatch => {\n  fetch(`http://www.omdbapi.com/?apikey=${id}&type=movie&s=avengers`)\n    .then(response => {\n      response.json().then(data => {\n        //Save key for login\n        localStorage.setItem(API_LOGIN_KEY, id);\n        dispatch({ type: LOAD_DASHBOARD_MOVIES, data: data.Search });\n        dispatch({ type: FETCH_LOGGED_IN_USER, data: id });\n      });\n    })\n    .catch(err => {\n      console.log({ err });\n    });\n};\n\nexport const loadMovieDetails = id => dispatch => {\n  let apiKey = localStorage.getItem(API_LOGIN_KEY);\n  dispatch({type:LOAD_MOVIE_DETAIL, data:undefined})\n  fetch(`http://www.omdbapi.com/?apikey=${apiKey}&i=${id}`).then(response =>\n    response.json().then(data => {\n      console.log({ loadMovieDetails: data });\n      dispatch({type:LOAD_MOVIE_DETAIL, data})\n    })\n  );\n};\n","\n\nexport const API_LOGIN_KEY = \"apiLoginKey\"","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from 'redux-thunk';\nimport { userReducer as user } from \"./reducers/user\";\n\n\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extensionâ€™s options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : compose;\n\nconst enhancer = composeEnhancers(\n    applyMiddleware(thunk)\n)\n\n\nconst store = createStore(\n  combineReducers({\n    user\n  }),\n  enhancer\n);\n\nexport default store;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport { loginAction } from \"../store/reducers/user\";\n\nclass Login extends React.Component {\n\n  state = {\n    login: undefined\n  }\n\n  _submit = (event) => {\n    console.log({event, state: this.state})\n    event.preventDefault()\n\n    this.props.dispatch(loginAction(this.state.login))\n  }\n\n  _onLoginIdChange = (event) => {\n    this.setState({[event.target.name]:event.target.value})\n  }\n\n\n  render() {\n    return (\n      <form onSubmit={this._submit}>\n        <Container>\n          {/* <h1>Login:</h1> */}\n          <Input name=\"login\" type=\"text\"  onChange={e => this._onLoginIdChange(e)}/>\n          <SubmitButton type=\"submit\" value=\"Submit\" onClick={this._submit}/>\n        </Container>\n      </form>\n    );\n  }\n}\n\nexport default connect()(Login)\n\nconst Container = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: ${window.innerWidth}px;\n  min-height: ${window.innerHeight}px;\n`;\n\nconst Input = styled.input`\n  padding: 0.5em;\n  color: palevioletred;\n  background: papayawhip;\n  border: none;\n  border-radius: 3px;\n  width: 100%;\n  margin-bottom: 0.5em;\n  height: 50px;\n  width: ${window.innerWidth * 0.4}px;\n  min-width: 200px;\n`;\nconst SubmitButton = styled.input`\n  padding: 0.5em;\n  width: 100px;\n  height: 50px;\n  border: 1px solid black;\n  border-radius: 4px;\n  font-size: 16px;\n  font-color: black;\n`;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { loadLoggedInUserAction } from \"./store/reducers/user\";\nimport {\n    Redirect\n  } from \"react-router-dom\";\n\nclass AppRouteContainer extends React.Component {\n  componentDidMount() {\n    this.props.dispatch(loadLoggedInUserAction());\n  }\n\n  componentDidUpdate(prevProps) {\n    const { fetchingUserSession, isLoggedIn } = this.props;\n    if (!fetchingUserSession && !isLoggedIn) {\n      // redirect to login route if not already there\n      \n    }\n  }\n\n  render() {\n    if (this.props.isLoggedIn) {\n      return <>{this.props.children}</>;\n    } else if (this.props.fetchingUserSession) {\n      return <div>fetching user...</div>;\n    } else {\n      return <Redirect to=\"/login\" />;\n    }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isLoggedIn: state.user.isLoggedIn,\n    fetchingUserSession: state.user.fetchingUserSession\n  };\n}\n\nexport default connect(mapStateToProps, null)(AppRouteContainer);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nfunction MovieCard(props) {\n  return (\n    <Container>\n      <Poster src={props.Poster} />\n      <ColumnDiv>\n        <div>{props.Title}</div>\n        <div>{props.Year}</div>\n      </ColumnDiv>\n    </Container>\n  );\n}\n\nexport default MovieCard;\n\nconst Container = styled.div`\n  box-shadow: 1px 1px 1px 1px #888888;\n  border-radius: 4px;\n  padding: 10px;\n  color: black;\n  margin: 10px;\n  display: flex;\n  flex-direction: row;\n`;\n\nconst ColumnDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-left: 10px;\n`;\n\nconst Poster = styled.img`\n  width: 100px;\n  height: 100px;\n`\n","import React from \"react\";\nimport AppRouteContainer from \"../AppRouteContainer\";\nimport { useSelector } from \"react-redux\";\nimport MovieCard from \"../components/MovieCard\";\nimport { Link } from \"react-router-dom\";\n\nfunction Home(props) {\n  const movies = useSelector(state => state.user.movies || []);\n  return (\n    <AppRouteContainer>\n      {movies.map(movie => (\n        <Link key={movie.imdbID} to={`/detail?id=${movie.imdbID}`}>\n          <MovieCard {...movie} />\n        </Link>\n      ))}\n    </AppRouteContainer>\n  );\n}\n\nexport default Home;\n","export function getUrlParam(parameter, defaultvalue) {\n  var urlparameter = defaultvalue;\n  if (window.location.href.indexOf(parameter) > -1) {\n    urlparameter = getUrlVars()[parameter];\n  }\n  return urlparameter;\n}\n\nfunction getUrlVars() {\n    var vars = {};\n    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {\n        vars[key] = value;\n    });\n    return vars;\n}","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport AppRouteContainer from \"../AppRouteContainer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loadMovieDetails } from \"../store/reducers/user\";\nimport { getUrlParam } from \"../utils\";\n\nfunction MovieDetail(props) {\n  const dispatch = useDispatch();\n  const movieId = getUrlParam(\"id\");\n  useEffect(() => {\n    dispatch(loadMovieDetails(movieId));\n  }, [movieId]);\n  const selectedMovie = useSelector(state => state.user.selectedMovie || {});\n  const {Title,Poster, ...rest } = selectedMovie\n  return (\n    <AppRouteContainer>\n      <Container>\n      <h1>{selectedMovie.Title}</h1>\n      <img src={selectedMovie.Poster} />\n      <ColumnDiv>\n      { Object.keys(rest).map((key)=> typeof rest[key] === \"string\" ?  <span><strong>{key}:</strong>{rest[key]}</span> : null)}\n      </ColumnDiv>\n      </Container>\n    </AppRouteContainer>\n  );\n}\n\nexport default MovieDetail;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n`;\n\nconst ColumnDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  line-height: 24px;\n`;\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport AppRouteContainer from \"../AppRouteContainer\";\n\n\nfunction Addmovie(props) {\n\n  return (\n    <AppRouteContainer>\n      addmovie\n    </AppRouteContainer>\n  );\n}\n\nexport default Addmovie;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport Login from './containers/login'\nimport Home from './containers/home'\nimport MovieDetail from \"./containers/moviedetail\";\nimport Addmovie from \"./containers/addMovie\";\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/detail\">\n            <MovieDetail />\n          </Route>\n          <Route path=\"/add\">\n            <Addmovie />\n          </Route>\n          <Route path=\"/dashboard\">\n            <Home />\n          </Route>\n          <Route path=\"/movie\">\n            <Home />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n    </Provider>\n  );\n}\n"],"sourceRoot":""}